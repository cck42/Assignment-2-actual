library(roxygen2)
roxygen2::roxygenise()
?rep
easy_ridge <- function(form, data){
#Build a model matrix
X <- model.matrix(form, data)
#Buld the corresponding y, removing anything with NAs
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
#find the rank and take QR decomposition in order to determine colinearity
qr_data <- qr(X)
rank <- qr_data$rank
if(rank==ncol(X)){
#solve directly
r <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
ret <- list(coefficients = r)
}else{
#QR decomposition
Q <- qr.Q(qr_data)
R <- qr.R(qr_data)[,1:rank]
QT <- crossprod(Q,Y)
r  <- backsolve(R,QT)
ret <- list(coefficients = c(r,NA))
return(ret)
}
easy_ridge <- function(form, data){
#Build a model matrix
X <- model.matrix(form, data)
#Buld the corresponding y, removing anything with NAs
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
#find the rank and take QR decomposition in order to determine colinearity
qr_data <- qr(X)
rank <- qr_data$rank
if(rank==ncol(X)){
#solve directly
r <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
ret <- list(coefficients = r)
}else{
#QR decomposition
Q <- qr.Q(qr_data)
R <- qr.R(qr_data)[,1:rank]
QT <- crossprod(Q,Y)
r  <- backsolve(R,QT)
ret <- list(coefficients = c(r,NA))
return(ret)
}
if(rank==ncol(X)){
#solve directly
r <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
ret <- list(coefficients = r)
}else{
#QR decomposition
Q <- qr.Q(qr_data)
R <- qr.R(qr_data)[,1:rank]
QT <- crossprod(Q,Y)
r  <- backsolve(R,QT)
ret <- list(coefficients = c(r,NA))
return(ret)
}
datdat <- data("iris")
datdat <-data("iris")
easy_ridge(Sepal.Length ~ ., iris)
easy_ridge <- function(form, data){
easy_ridge <- function(form, data){
#Build a model matrix
X <- model.matrix(form, data)
#Buld the corresponding y, removing anything with NAs
Y <- data[[as.character(form)[2]]][as.numeric(rownames(X))]
#find the rank and take QR decomposition in order to determine colinearity
qr_data <- qr(X)
rank <- qr_data$rank
if(rank==ncol(X)){
#solve directly
r <- solve( crossprod(X) + diag(rep(lambda, ncol(X))) ) %*% t(X) %*% Y
ret <- list(coefficients = r)
}else{
#QR decomposition
Q <- qr.Q(qr_data)
R <- qr.R(qr_data)[,1:rank]
QT <- crossprod(Q,Y)
r  <- backsolve(R,QT)
ret <- list(coefficients = c(r,NA))
return(ret)
}
easy_ridge(Sepal.Length ~ ., iris)
roxygenise()
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
getwd()
devtools::create("/Users/chaneykalinich/Documents/BIS557/bis557")
